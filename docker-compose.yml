# Развернуть локально базу данных:
# Cоздать новую базу данных для сервиса
# Настроить пользователя: заведите пользователя и выдайте права на созданную БД
# Создать таблицы: спроектируйте структуру для хранения полученных данных о заказах, ориентируясь на прилагаемую модель данных.
version: '3.9'

services:
  db:
    image: postgres:17.6
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: l0user
      POSTGRES_PASSWORD: l0pass
      POSTGRES_DB: l0db

# Подключиться и подписаться на канал сообщений: настроить получение данных из брокера сообщений (Kafka).
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    restart: always
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - zookeeper
# Приложение
  app:
    build: .
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      KAFKA_BROKERS: kafka:9092
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: l0user
      DB_PASSWORD: l0pass
      DB_NAME: l0db
      KAFKA_TOPIC: orders
      HTTP_PORT: 8081
    depends_on:
      - db
      - kafka
    command: >
      sh -c "
        sleep 10 &&
        go run /init-db.sh &&
        ./l0
      "