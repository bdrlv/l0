# Развернуть локально базу данных:
# Cоздать новую базу данных для сервиса
# Настроить пользователя: заведите пользователя и выдайте права на созданную БД
# Создать таблицы: спроектируйте структуру для хранения полученных данных о заказах, ориентируясь на прилагаемую модель данных.
version: '3.9'

networks:
  app-network:
    driver: bridge

services:
  db:
    image: postgres:17.6
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: l0user
      POSTGRES_PASSWORD: l0pass
      POSTGRES_DB: l0db
    networks:
      - app-network

# Подключиться и подписаться на канал сообщений: настроить получение данных из брокера сообщений (Kafka).
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    restart: always
    ports:
      - "2181:2181"
    networks:
      - app-network
  kafka:
    image: wurstmeister/kafka
    restart: always
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CONN: "kafka:9092"
      KAFKA_GROUPID: "group"
      KAFKA_PORT: 9092
      HOSTNAME_COMMAND: "echo kafka"
    depends_on:
      - zookeeper
    networks:
      - app-network

# Приложение
  app:
    build: .
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment: 
      DB_HOST: db
      DB_PORT: "5432"
      DB_USER: l0user
      DB_PASSWORD: l0pass
      DB_NAME: l0db
      PG_SSLMODE: disable
      KAFKA_CONN: kafka:9092
      KAFKA_TOPICNAME: orders
      KAFKA_GROUPID: group
      HTTP_PORT: "8081"
      PG_CONNSTRING: postgres://l0user:l0pass@db:5432/l0db
    depends_on:
      - db
      - kafka
    networks:
      - app-network